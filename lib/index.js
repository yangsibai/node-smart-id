// Generated by CoffeeScript 1.7.1
(function() {
  var generateRandomStr, getCondidates, lower, lowerSmart, number, numberSmart, tryGenerate, tryGenerateASync, upper, upperSmart, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require("underscore");

  lower = "abcdefghijklmnopqrstuvwxyz";

  lowerSmart = "abcdefghjkmnpqrstuvwxyz";

  upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

  upperSmart = "ABCDEFGHJKMNPRSTUVWXY";

  number = "0123456789";

  numberSmart = "3456789";


  /*
      generate id
      @param {Object} [options]
      @param {String} [options.mode = "aA0"] mode: 0 = 0 ~ 9, a = a ~ z, A = A ~ Z, s = smart, other characters = add these characters in candidate
      @param {Number} [options.length = 10]
      @param {Function} [options.verify] verify random id
      @param {Function} [options.retry = 3] retry times
      @param {Function} [cb] callback function
      @return {String} random string
   */

  exports.make = function(options, cb) {
    var condidates, defaultOptions, id, isSync, k, v;
    defaultOptions = {
      mode: "aA0",
      length: 10,
      verify: null,
      retry: 1
    };
    isSync = true;
    if (arguments.length === 1) {
      if (_.isFunction(options)) {
        isSync = false;
        cb = options;
      } else {
        for (k in options) {
          v = options[k];
          if (v) {
            defaultOptions[k] = v;
          }
        }
      }
    } else if (arguments.length === 2) {
      isSync = false;
      for (k in options) {
        v = options[k];
        if (v) {
          defaultOptions[k] = v;
        }
      }
    }
    if (isSync) {
      if (defaultOptions.length <= 0) {
        throw new Error("length should be a positive number");
      }
      if (!defaultOptions.mode) {
        throw new Error("mode should not be empty");
      }
    } else {
      if (defaultOptions.length <= 0) {
        return cb(new Error("length should be a positive number"));
      }
      if (!defaultOptions.mode) {
        return cb(new Error("mode should not be empty"));
      }
    }
    condidates = getCondidates(defaultOptions.mode);
    if (!defaultOptions.verify) {
      id = generateRandomStr(condidates, defaultOptions.length);
      if (isSync) {
        return id;
      } else {
        return cb(id);
      }
    } else if (defaultOptions.length === 1) {
      id = tryGenerate(defaultOptions, condidates);
      return id;
    } else if (defaultOptions.length === 2) {
      return tryGenerateASync(defaultOptions, condidates, cb);
    }
  };

  tryGenerate = function(options, condidates) {
    var i, id, _i, _ref;
    for (i = _i = 1, _ref = options.retry; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      id = generateRandomStr(condidates, options.length);
      if ((!_.isFunction(options.verify)) || options.verify(id)) {
        return id;
      }
    }
    throw new Error("can't get a valid random id in " + options.retry + " times");
  };

  tryGenerateASync = function(options, condidates, cb) {
    var id;
    if (options.length <= 0) {
      return cb(new Error("can't get a valid random id in " + options.retry + " times"));
    } else {
      options.length--;
      id = generateRandomStr(condidates, options.length);
      return options.verify(id, function(err, success) {
        if (err) {
          return cb(err);
        }
        if (success) {
          return cb(null, id);
        }
        return tryGenerateASync(options, condidates, cb);
      });
    }
  };


  /*
      get condidates characters
      @param {String} mode
      @return {String} condidate characters
   */

  getCondidates = function(mode) {
    var c, characters, isSmart, _i, _len;
    isSmart = __indexOf.call(mode, "s") >= 0;
    characters = "";
    for (_i = 0, _len = mode.length; _i < _len; _i++) {
      c = mode[_i];
      switch (c) {
        case "a":
          characters += (isSmart ? lowerSmart : lower);
          break;
        case "A":
          characters += (isSmart ? upperSmart : upper);
          break;
        case "0":
          characters += (isSmart ? numberSmart : number);
          break;
        default:
          characters += c;
      }
    }
    return characters;
  };


  /*
      generate a random string
      @param {String} condidateChars
      @param {Number} length
      @return {String} random string
   */

  generateRandomStr = function(condidateChars, length) {
    var i, randomStr, _i;
    randomStr = "";
    for (i = _i = 1; 1 <= length ? _i <= length : _i >= length; i = 1 <= length ? ++_i : --_i) {
      randomStr += condidateChars[~~(Math.random() * condidateChars.length)];
    }
    return randomStr;
  };

}).call(this);

//# sourceMappingURL=index.map
